// PAM Progressive Web App Service Worker
// Provides offline functionality for Australian parents

const CACHE_NAME = 'pam-app-v1.0.0'
const STATIC_CACHE_NAME = 'pam-static-v1.0.0'
const DATA_CACHE_NAME = 'pam-data-v1.0.0'

// Assets to cache for offline use
const STATIC_ASSETS = [
  '/',
  '/dashboard',
  '/dashboard/tracker',
  '/dashboard/checklist', 
  '/dashboard/analytics',
  '/dashboard/chat',
  '/dashboard/children',
  '/login',
  '/signup',
  '/offline',
  // Add other static assets as needed
]

// API routes that should be cached
const API_ROUTES = [
  '/api/auth',
  '/api/calendar',
]

// Network-first routes (try network, fallback to cache)
const NETWORK_FIRST_ROUTES = [
  '/dashboard/tracker',
  '/dashboard/analytics', 
  '/dashboard/chat',
]

// Cache-first routes (try cache, fallback to network)
const CACHE_FIRST_ROUTES = [
  '/dashboard/checklist',
  '/dashboard/children',
]

self.addEventListener('install', (event) => {
  console.log('[ServiceWorker] Install')
  
  event.waitUntil(
    Promise.all([
      // Cache static assets
      caches.open(STATIC_CACHE_NAME).then((cache) => {
        console.log('[ServiceWorker] Pre-caching static assets')
        return cache.addAll(STATIC_ASSETS)
      }),
      
      // Skip waiting to activate immediately
      self.skipWaiting()
    ])
  )
})

self.addEventListener('activate', (event) => {
  console.log('[ServiceWorker] Activate')
  
  event.waitUntil(
    Promise.all([
      // Clean up old caches
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== CACHE_NAME && 
                cacheName !== STATIC_CACHE_NAME && 
                cacheName !== DATA_CACHE_NAME) {
              console.log('[ServiceWorker] Removing old cache:', cacheName)
              return caches.delete(cacheName)
            }
          })
        )
      }),
      
      // Take control of all pages
      self.clients.claim()
    ])
  )
})

self.addEventListener('fetch', (event) => {
  const { request } = event
  const url = new URL(request.url)
  
  // Skip non-GET requests
  if (request.method !== 'GET') {
    return
  }
  
  // Skip chrome-extension and other non-http requests
  if (!request.url.startsWith('http')) {
    return
  }

  // Handle different types of requests
  if (url.pathname.startsWith('/api/')) {
    // API requests - network first with cache fallback
    event.respondWith(handleApiRequest(request))
  } else if (url.pathname.startsWith('/_next/static/')) {
    // Static assets - cache first
    event.respondWith(handleStaticAsset(request))
  } else if (NETWORK_FIRST_ROUTES.some(route => url.pathname.startsWith(route))) {
    // Network-first routes
    event.respondWith(handleNetworkFirst(request))
  } else if (CACHE_FIRST_ROUTES.some(route => url.pathname.startsWith(route))) {
    // Cache-first routes  
    event.respondWith(handleCacheFirst(request))
  } else {
    // Default: network first for navigation
    event.respondWith(handleNavigation(request))
  }
})

// Handle API requests with background sync for offline actions
async function handleApiRequest(request) {
  const url = new URL(request.url)
  
  try {
    // Try network first
    const response = await fetch(request)
    
    // Cache successful GET responses
    if (response.ok && request.method === 'GET') {
      const cache = await caches.open(DATA_CACHE_NAME)
      cache.put(request, response.clone())
    }
    
    return response
  } catch (error) {
    console.log('[ServiceWorker] Network failed for API request:', url.pathname)
    
    // Try to get from cache
    const cache = await caches.open(DATA_CACHE_NAME)
    const cachedResponse = await cache.match(request)
    
    if (cachedResponse) {
      console.log('[ServiceWorker] Serving API request from cache:', url.pathname)
      return cachedResponse
    }
    
    // If it's a critical endpoint, return error response
    if (url.pathname.includes('/auth/') || url.pathname.includes('/user')) {
      return new Response(
        JSON.stringify({ error: 'Offline - authentication required' }),
        { 
          status: 401,
          headers: { 'Content-Type': 'application/json' }
        }
      )
    }
    
    // Generic offline response for other API calls
    return new Response(
      JSON.stringify({ error: 'Offline - please try again when connected' }),
      { 
        status: 503,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }
}

// Handle static assets (cache first)
async function handleStaticAsset(request) {
  const cache = await caches.open(STATIC_CACHE_NAME)
  const cachedResponse = await cache.match(request)
  
  if (cachedResponse) {
    return cachedResponse
  }
  
  try {
    const response = await fetch(request)
    if (response.ok) {
      cache.put(request, response.clone())
    }
    return response
  } catch (error) {
    console.log('[ServiceWorker] Failed to fetch static asset:', request.url)
    throw error
  }
}

// Network-first strategy
async function handleNetworkFirst(request) {
  try {
    const response = await fetch(request)
    
    // Cache successful responses
    if (response.ok) {
      const cache = await caches.open(CACHE_NAME)
      cache.put(request, response.clone())
    }
    
    return response
  } catch (error) {
    console.log('[ServiceWorker] Network failed, trying cache:', request.url)
    
    const cache = await caches.open(CACHE_NAME)
    const cachedResponse = await cache.match(request)
    
    if (cachedResponse) {
      return cachedResponse
    }
    
    // Fallback to offline page for navigation requests
    if (request.mode === 'navigate') {
      return caches.match('/offline')
    }
    
    throw error
  }
}

// Cache-first strategy
async function handleCacheFirst(request) {
  const cache = await caches.open(CACHE_NAME)
  const cachedResponse = await cache.match(request)
  
  if (cachedResponse) {
    // Update cache in background
    fetch(request).then(response => {
      if (response.ok) {
        cache.put(request, response.clone())
      }
    }).catch(() => {
      // Ignore network errors for background updates
    })
    
    return cachedResponse
  }
  
  try {
    const response = await fetch(request)
    if (response.ok) {
      cache.put(request, response.clone())
    }
    return response
  } catch (error) {
    if (request.mode === 'navigate') {
      return caches.match('/offline')
    }
    throw error
  }
}

// Handle navigation requests
async function handleNavigation(request) {
  try {
    const response = await fetch(request)
    
    if (response.ok) {
      const cache = await caches.open(CACHE_NAME)
      cache.put(request, response.clone())
    }
    
    return response
  } catch (error) {
    console.log('[ServiceWorker] Navigation failed, trying cache:', request.url)
    
    const cache = await caches.open(CACHE_NAME)
    const cachedResponse = await cache.match(request)
    
    if (cachedResponse) {
      return cachedResponse
    }
    
    // Return offline page
    return caches.match('/offline') || new Response(
      '<html><body><h1>Offline</h1><p>Please check your internet connection.</p></body></html>',
      { headers: { 'Content-Type': 'text/html' } }
    )
  }
}

// Background sync for offline actions
self.addEventListener('sync', (event) => {
  console.log('[ServiceWorker] Background sync:', event.tag)
  
  if (event.tag === 'activity-sync') {
    event.waitUntil(syncOfflineActivities())
  } else if (event.tag === 'checklist-sync') {
    event.waitUntil(syncOfflineChecklistItems())
  }
})

// Sync offline activities when back online  
async function syncOfflineActivities() {
  try {
    // Get offline activities from IndexedDB
    const offlineActivities = await getOfflineActivities()
    
    for (const activity of offlineActivities) {
      try {
        const response = await fetch('/api/activities', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(activity)
        })
        
        if (response.ok) {
          // Remove from offline storage
          await removeOfflineActivity(activity.id)
          console.log('[ServiceWorker] Synced offline activity:', activity.id)
        }
      } catch (error) {
        console.error('[ServiceWorker] Failed to sync activity:', error)
      }
    }
  } catch (error) {
    console.error('[ServiceWorker] Background sync failed:', error)  
  }
}

// Sync offline checklist updates
async function syncOfflineChecklistItems() {
  try {
    const offlineUpdates = await getOfflineChecklistUpdates()
    
    for (const update of offlineUpdates) {
      try {
        const response = await fetch(`/api/checklist/${update.id}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(update.data)
        })
        
        if (response.ok) {
          await removeOfflineChecklistUpdate(update.id)
          console.log('[ServiceWorker] Synced checklist update:', update.id)
        }
      } catch (error) {
        console.error('[ServiceWorker] Failed to sync checklist update:', error)
      }
    }
  } catch (error) {
    console.error('[ServiceWorker] Checklist sync failed:', error)
  }
}

// IndexedDB helpers (simplified - would need full implementation)
async function getOfflineActivities() {
  // Implementation would read from IndexedDB
  return []
}

async function removeOfflineActivity(id) {
  // Implementation would remove from IndexedDB
  console.log('Removing offline activity:', id)
}

async function getOfflineChecklistUpdates() {
  // Implementation would read from IndexedDB  
  return []
}

async function removeOfflineChecklistUpdate(id) {
  // Implementation would remove from IndexedDB
  console.log('Removing offline checklist update:', id)
}

// Push notification handling
self.addEventListener('push', (event) => {
  console.log('[ServiceWorker] Push received:', event)
  
  const options = {
    body: 'You have new parenting insights available!',
    icon: '/icon-192x192.png',
    badge: '/badge-72x72.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1
    },
    actions: [
      {
        action: 'explore',
        title: 'View Insights',
        icon: '/icon-explore.png'
      },
      {
        action: 'close', 
        title: 'Close',
        icon: '/icon-close.png'
      }
    ]
  }
  
  if (event.data) {
    const pushData = event.data.json()
    options.body = pushData.body || options.body
    options.data = { ...options.data, ...pushData }
  }
  
  event.waitUntil(
    self.registration.showNotification('PAM - Parenting Assistant', options)
  )
})

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  console.log('[ServiceWorker] Notification clicked:', event)
  
  event.notification.close()
  
  if (event.action === 'explore') {
    event.waitUntil(
      clients.openWindow('/dashboard/analytics')
    )
  } else if (event.action === 'close') {
    // Just close the notification
    return
  } else {
    // Open main dashboard
    event.waitUntil(
      clients.openWindow('/dashboard')
    )
  }
})

console.log('[ServiceWorker] Service Worker loaded')