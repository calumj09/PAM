'use client'

import { useState, useEffect } from 'react'
import { TrackerAnalyticsService, SleepPattern, FeedingPattern, NappyPattern, WeeklyInsight } from '@/lib/services/tracker-analytics-service'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { 
  ChartBarIcon,
  ClockIcon,
  DocumentArrowDownIcon,
  ArrowTrendingUpIcon,
  ArrowTrendingDownIcon,
  MinusIcon
} from '@heroicons/react/24/outline'

interface TrackerAnalyticsProps {
  childId: string
  childName: string
}

export function TrackerAnalytics({ childId, childName }: TrackerAnalyticsProps) {
  const [sleepPattern, setSleepPattern] = useState<SleepPattern | null>(null)
  const [feedingPattern, setFeedingPattern] = useState<FeedingPattern | null>(null)
  const [nappyPattern, setNappyPattern] = useState<NappyPattern | null>(null)
  const [insights, setInsights] = useState<WeeklyInsight[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState('')
  const [activeTab, setActiveTab] = useState<'patterns' | 'insights' | 'export'>('patterns')

  useEffect(() => {
    loadAnalytics()
  }, [childId])

  const loadAnalytics = async () => {
    try {
      setIsLoading(true)
      setError('')

      const [sleep, feeding, nappy, weeklyInsights] = await Promise.all([
        TrackerAnalyticsService.analyzeSleepPatterns(childId, 7),
        TrackerAnalyticsService.analyzeFeedingPatterns(childId, 7),
        TrackerAnalyticsService.analyzeNappyPatterns(childId, 7),
        TrackerAnalyticsService.generateWeeklyInsights(childId, 0)
      ])

      setSleepPattern(sleep)
      setFeedingPattern(feeding)
      setNappyPattern(nappy)
      setInsights(weeklyInsights)
    } catch (error) {
      console.error('Error loading analytics:', error)
      setError('Failed to load analytics data')
    } finally {
      setIsLoading(false)
    }
  }

  const generateHealthcareReport = async () => {
    try {
      const report = await TrackerAnalyticsService.generateHealthcareReport(childId, childName, 30)
      
      // Create downloadable text report
      const reportText = `
HEALTHCARE REPORT - ${report.childName}
Generated: ${new Date().toLocaleDateString('en-AU')}
Period: ${report.dateRange.start.toLocaleDateString('en-AU')} to ${report.dateRange.end.toLocaleDateString('en-AU')}

SUMMARY (${report.summary.totalDays} days):
• Average feedings per day: ${report.summary.avgFeedingsPerDay}
• Average sleep hours per day: ${Math.round(report.summary.avgSleepHoursPerDay * 10) / 10}
• Average nappies per day: ${report.summary.avgNappiesPerDay}

SLEEP PATTERNS:
• Average sleep duration: ${report.patterns.sleep.averageSleepDuration} minutes
• Average naps per day: ${report.patterns.sleep.averageNapsPerDay}
• Longest sleep stretch: ${report.patterns.sleep.longestSleepStretch} minutes
• Night sleep start: ${report.patterns.sleep.nightSleepStart || 'Not detected'}
• Morning wake time: ${report.patterns.sleep.morningWakeTime || 'Not detected'}
• Sleep efficiency: ${report.patterns.sleep.sleepEfficiency}%

FEEDING PATTERNS:
• Average feeding interval: ${report.patterns.feeding.averageFeedingInterval} minutes
• Average feeding duration: ${report.patterns.feeding.averageFeedingDuration} minutes
• Average bottle amount: ${report.patterns.feeding.averageBottleAmount}ml
• Preferred feeding times: ${report.patterns.feeding.preferredFeedingTimes.join(', ')}
• Breast vs bottle ratio: ${report.patterns.feeding.breastVsBottleRatio}

NAPPY PATTERNS:
• Average nappies per day: ${report.patterns.nappy.averageNappiesPerDay}
• Wet vs dirty ratio: ${report.patterns.nappy.wetVsDirtyRatio}
• Longest dry stretch: ${report.patterns.nappy.longestDryStretch} hours
• Typical change times: ${report.patterns.nappy.typicalChangeHours.join(', ')}

GROWTH NOTES:
${report.summary.growthNotes.map(note => `• ${note}`).join('\n')}

MILESTONES:
${report.milestones.map(milestone => `• ${milestone}`).join('\n')}

${report.concerns.length > 0 ? `AREAS TO DISCUSS:\n${report.concerns.map(concern => `• ${concern}`).join('\n')}` : ''}

This report was generated by PAM (Parent Admin Manager) for informational purposes.
Please discuss with your healthcare provider for professional medical advice.
      `.trim()

      const blob = new Blob([reportText], { type: 'text/plain' })
      const url = URL.createObjectURL(blob)
      const link = document.createElement('a')
      link.href = url
      link.download = `${childName}-healthcare-report-${new Date().toISOString().split('T')[0]}.txt`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      URL.revokeObjectURL(url)
    } catch (error) {
      console.error('Error generating report:', error)
      setError('Failed to generate healthcare report')
    }
  }

  const getTrendIcon = (trend: 'increasing' | 'decreasing' | 'stable') => {
    switch (trend) {
      case 'increasing':
        return <ArrowTrendingUpIcon className="w-4 h-4 text-green-600" />
      case 'decreasing':
        return <ArrowTrendingDownIcon className="w-4 h-4 text-red-600" />
      default:
        return <MinusIcon className="w-4 h-4 text-gray-500" />
    }
  }

  if (isLoading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="animate-pulse space-y-4">
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            <div className="h-4 bg-gray-200 rounded w-1/2"></div>
            <div className="h-4 bg-gray-200 rounded w-2/3"></div>
          </div>
        </CardContent>
      </Card>
    )
  }

  if (error) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-center py-6">
            <ChartBarIcon className="w-12 h-12 mx-auto mb-3 text-gray-400" />
            <p className="text-sm text-red-600 mb-4">{error}</p>
            <Button onClick={loadAnalytics} variant="outline" size="sm">
              Try Again
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <ChartBarIcon className="w-5 h-5 text-pam-red" />
            <CardTitle>Analytics & Patterns</CardTitle>
          </div>
        </div>
        
        {/* Tab Navigation */}
        <div className="flex gap-1 bg-gray-100 p-1 rounded-lg">
          <button
            onClick={() => setActiveTab('patterns')}
            className={`flex-1 px-3 py-1 rounded text-sm font-medium transition-colors ${
              activeTab === 'patterns' 
                ? 'bg-white text-pam-red shadow-sm' 
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            Patterns
          </button>
          <button
            onClick={() => setActiveTab('insights')}
            className={`flex-1 px-3 py-1 rounded text-sm font-medium transition-colors ${
              activeTab === 'insights' 
                ? 'bg-white text-pam-red shadow-sm' 
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            Insights
          </button>
          <button
            onClick={() => setActiveTab('export')}
            className={`flex-1 px-3 py-1 rounded text-sm font-medium transition-colors ${
              activeTab === 'export' 
                ? 'bg-white text-pam-red shadow-sm' 
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            Export
          </button>
        </div>
      </CardHeader>

      <CardContent className="p-6 pt-0">
        {activeTab === 'patterns' && (
          <div className="space-y-6">
            {/* Sleep Patterns */}
            {sleepPattern && (
              <div>
                <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
                  <span className="text-lg">😴</span>
                  Sleep Patterns (Last 7 Days)
                </h4>
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div className="bg-blue-50 p-3 rounded-lg">
                    <div className="font-medium text-blue-900">
                      {Math.round(sleepPattern.totalSleepPerDay / 60 * 10) / 10}h
                    </div>
                    <div className="text-blue-700">Average daily sleep</div>
                  </div>
                  <div className="bg-blue-50 p-3 rounded-lg">
                    <div className="font-medium text-blue-900">
                      {sleepPattern.averageNapsPerDay}
                    </div>
                    <div className="text-blue-700">Average naps/day</div>
                  </div>
                  <div className="bg-blue-50 p-3 rounded-lg">
                    <div className="font-medium text-blue-900">
                      {Math.round(sleepPattern.longestSleepStretch / 60 * 10) / 10}h
                    </div>
                    <div className="text-blue-700">Longest stretch</div>
                  </div>
                  <div className="bg-blue-50 p-3 rounded-lg">
                    <div className="font-medium text-blue-900">
                      {sleepPattern.sleepEfficiency}%
                    </div>
                    <div className="text-blue-700">Sleep efficiency</div>
                  </div>
                </div>
                {sleepPattern.nightSleepStart && (
                  <p className="text-xs text-gray-600 mt-2">
                    Typical bedtime: {sleepPattern.nightSleepStart}
                    {sleepPattern.morningWakeTime && ` - ${sleepPattern.morningWakeTime}`}
                  </p>
                )}
              </div>
            )}

            {/* Feeding Patterns */}
            {feedingPattern && (
              <div>
                <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
                  <span className="text-lg">🍼</span>
                  Feeding Patterns (Last 7 Days)
                </h4>
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div className="bg-green-50 p-3 rounded-lg">
                    <div className="font-medium text-green-900">
                      {feedingPattern.feedingsPerDay}
                    </div>
                    <div className="text-green-700">Feeds per day</div>
                  </div>
                  <div className="bg-green-50 p-3 rounded-lg">
                    <div className="font-medium text-green-900">
                      {Math.round(feedingPattern.averageFeedingInterval / 60 * 10) / 10}h
                    </div>
                    <div className="text-green-700">Between feeds</div>
                  </div>
                  <div className="bg-green-50 p-3 rounded-lg">
                    <div className="font-medium text-green-900">
                      {feedingPattern.averageFeedingDuration}min
                    </div>
                    <div className="text-green-700">Average duration</div>
                  </div>
                  <div className="bg-green-50 p-3 rounded-lg">
                    <div className="font-medium text-green-900">
                      {feedingPattern.averageBottleAmount}ml
                    </div>
                    <div className="text-green-700">Average bottle</div>
                  </div>
                </div>
                {feedingPattern.preferredFeedingTimes.length > 0 && (
                  <p className="text-xs text-gray-600 mt-2">
                    Preferred times: {feedingPattern.preferredFeedingTimes.join(', ')}
                  </p>
                )}
              </div>
            )}

            {/* Nappy Patterns */}
            {nappyPattern && (
              <div>
                <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
                  <span className="text-lg">🧷</span>
                  Nappy Patterns (Last 7 Days)
                </h4>
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div className="bg-orange-50 p-3 rounded-lg">
                    <div className="font-medium text-orange-900">
                      {nappyPattern.averageNappiesPerDay}
                    </div>
                    <div className="text-orange-700">Changes per day</div>
                  </div>
                  <div className="bg-orange-50 p-3 rounded-lg">
                    <div className="font-medium text-orange-900">
                      {nappyPattern.longestDryStretch}h
                    </div>
                    <div className="text-orange-700">Longest dry stretch</div>
                  </div>
                </div>
                {nappyPattern.typicalChangeHours.length > 0 && (
                  <p className="text-xs text-gray-600 mt-2">
                    Typical change times: {nappyPattern.typicalChangeHours.join(', ')}
                  </p>
                )}
              </div>
            )}
          </div>
        )}

        {activeTab === 'insights' && (
          <div className="space-y-4">
            {insights.length > 0 ? (
              insights.map((insight, index) => (
                <div key={index} className={`p-4 rounded-lg border-l-4 ${
                  insight.isPositive 
                    ? 'bg-green-50 border-green-400' 
                    : 'bg-yellow-50 border-yellow-400'
                }`}>
                  <div className="flex items-start gap-3">
                    <span className="text-xl">{insight.emoji}</span>
                    <div>
                      <div className="font-medium text-gray-900 capitalize">
                        {insight.category}
                      </div>
                      <p className="text-sm text-gray-700 mt-1">
                        {insight.insight}
                      </p>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-6 text-gray-500">
                <ClockIcon className="w-12 h-12 mx-auto mb-3 opacity-50" />
                <p className="text-sm">
                  Track more activities to see insights and patterns.
                </p>
              </div>
            )}
          </div>
        )}

        {activeTab === 'export' && (
          <div className="space-y-4">
            <div className="text-center">
              <DocumentArrowDownIcon className="w-12 h-12 mx-auto mb-3 text-pam-red" />
              <h4 className="font-medium text-gray-900 mb-2">Healthcare Visit Report</h4>
              <p className="text-sm text-gray-600 mb-6">
                Generate a comprehensive report with patterns and insights for your healthcare provider.
              </p>
              
              <Button
                onClick={generateHealthcareReport}
                className="bg-pam-red hover:bg-pam-red/90"
              >
                <DocumentArrowDownIcon className="w-4 h-4 mr-2" />
                Generate Report
              </Button>
            </div>
            
            <div className="bg-blue-50 p-4 rounded-lg mt-6">
              <h5 className="font-medium text-blue-900 mb-2">📋 Report Includes:</h5>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>• Sleep patterns and schedule analysis</li>
                <li>• Feeding frequency and duration trends</li>
                <li>• Nappy output and timing patterns</li>
                <li>• Growth milestones and developments</li>
                <li>• Identified concerns or areas to discuss</li>
                <li>• 30-day activity summary</li>
              </ul>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}